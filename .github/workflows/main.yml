name: Main Kittygram workflow

on:
  push:
    branches:
      - main

jobs:
  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub (Backend)
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_backend:latest

  build_frontend_and_push_to_docker_hub:
    name: Push Docker image to DockerHub (Frontend)
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_frontend:latest

  build_gateway_and_push_to_docker_hub:
    name: Push Docker image to DockerHub (Gateway)
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push gateway Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./nginx/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/kittygram_gateway:latest

  deploy:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs:
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v3
      #      - shell: bash
      #        env:
      #          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      #          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      #          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      #          DATABASE_URL: ${{ secrets.DATABASE_URL }}
      #        run: |
      #          echo "POSTGRES_DB=$POSTGRES_DB" >> .env
      #          echo "POSTGRES_USER=$POSTGRES_USER" >> .env
      #          echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
      #          echo "DATABASE_URL=$DATABASE_URL" >> .env

      - name: Copy .env to the server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: ".env"
          target: "/home/user/kittygram"
      - name: Copy docker-compose.yml to the server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: "/home/user/kittygram"
      - name: Execute deployment via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd /home/user/kittygram
            sudo docker-compose -f docker-compose.yml pull
            sudo docker-compose -f docker-compose.yml down
            sudo docker-compose -f docker-compose.yml up -d
            sudo docker-compose -f docker-compose.yml exec backend python manage.py collectstatic --noinput
            sudo docker-compose -f docker-compose.yml exec backend python manage.py migrate
            sudo docker system prune -af
  tests:
    runs-on: ubuntu-latest
    needs: deploy
    services:
      postgres:
        image: postgres:13.10
        env:
          POSTGRES_USER: kittygram_user
          POSTGRES_PASSWORD: kittygram_password
          POSTGRES_DB: kittygram
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9
          cache: 'pip'
      - name: Copy requirements.txt
        run: cp ./backend/requirements.txt ./requirements.txt
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip 
          pip install -r ./requirements.txt
      - name: run tests
        run: python -m pytest
  #      - name: Run Django tests
  #        env:
  #          POSTGRES_USER: kittygram_user
  #          POSTGRES_PASSWORD: kittygram_password
  #          POSTGRES_DB: kittygram
  #          DB_HOST: localhost
  #          DB_PORT: 5432
  #        run: |
  #          cd backend/
  #          python manage.py test
  frontend_tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v3
      - name: Set up nodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: |
          cd frontend/
          npm ci
      - name: Run frontend tests
        run: |
          cd frontend/
          npm run test

  send_message:
    runs-on: ubuntu-latest
    needs: tests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üöÄ –î–µ–ø–ª–æ–π –ø—Ä–æ—à—ë–ª —É—Å–ø–µ—à–Ω–æ!
            üë§ –ê–≤—Ç–æ—Ä: ${{ github.actor }}
            üìù –ö–æ–º–º–∏—Ç: ${{ github.event.commits[0].message }}
            üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–º–º–∏—Ç: https://github.com/${{ github.repository }}/commit/${{ github.sha }}